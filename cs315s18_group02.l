BEGINSTMT beginstmt
IFSTMT ifstmt
ELSESTMT elsestmt
ARRAYOPENER \[
ARRAYCLOSER \]
CONSTANT const
STRINGTYPE string
BOOLEANTYPE boolean
DIGITTYPE digit
CHARTYPE char
SETTYPE set
STRINGARRAY str
DIGITARRAY dgt
CHARARRAY chr
SETARRAY st
TRUE TRUE
FALSE FALSE
WHITESPACE [ \t]+
IN in
OUT out
LOOPSTMT loopstmt
COMMA \,
LP \(
RP \)
LPP \{
RPP \}
DIGIT [0-9]
ASSIGNMENT \=
UNION \&
INTERSECTION \|
COMPLEMENT \'
DIFFERENCE \\
LETTER [a-zA-Z]
STRING [a-zA-Z]+
VAR_ID [a-zA-Z]+[0-9]
SUBSET \^
SUPERSET \*  
INPUT \< 
OUTPUT \>
COMMENT \/
%%
{BEGINSTMT} return BEGINSTMT;
{IFSTMT} return IFSTMT;
{ELSESTMT} return ELSESTMT;
{ARRAYOPENER} return ARRAYOPENER;
{ARRAYCLOSER} return ARRAYCLOSER;
{CONSTANT} return CONSTANT;
{STRINGTYPE} return STRINGTYPE;
{BOOLEANTYPE} return BOOLEANTYPE;
{DIGITTYPE} return DIGITTYPE;
{CHARTYPE} return CHARTYPE;
{SETTYPE} return SETTYPE;
{STRINGARRAY} return STRINGARRAY;
{DIGITARRAY} return DIGITARRAY;
{CHARARRAY} return CHARARRAY;
{SETARRAY} return SETARRAY;
{LOOPSTMT} return LOOPSTMT;
{COMMA} return COMMA;
{TRUE} return TRUE;
{FALSE} return FALSE;
{LP} return LP;
{RP} return RP;
{LPP} return LPP;
{RPP} return RPP;
{ASSIGNMENT} return ASSIGNMENT;
{UNION} return UNION;
{INTERSECTION} return INTERSECTION;
{COMPLEMENT} return COMPLEMENT;
{DIFFERENCE} return DIFFERENCE;
{OUT} return OUT;
{IN} return IN;
{SUBSET} return SUBSET; 
{SUPERSET} return SUPERSET; 
{INPUT} return INPUT; 
{OUTPUT} return OUTPUT;
{COMMENT} return COMMENT;
{WHITESPACE} return WHITESPACE;
{DIGIT} return DIGIT; 
{VAR_ID} return VAR_ID;
{STRING} return STRING;
[ \t\n\r] ;
. { yyerror(char*); }
%%
int yywrap() { return 1; }
